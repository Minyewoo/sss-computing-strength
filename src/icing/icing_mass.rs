//! –£—á–µ—Ç –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è

use std::rc::Rc;
use crate::{Area, Bound, ILoad, Position};
use super::IIcingStab;

/// –£—á–µ—Ç –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è —Å—É–¥–Ω–∞, —Ä–∞—Å—á–µ—Ç –º–∞—Å—Å—ã –ª—å–¥–∞. 
/// –ú–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è, —á–∞—Å—Ç–∏—á–Ω—ã–º –∏ –ø–æ–ª–Ω—ã–º.  
/// –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–¥–æ–∏–∑–º–µ—â–µ–Ω–∏—è –∏  
/// –≤–æ–∑–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ —Ç—è–∂–µ—Å—Ç–∏. –ü—Ä–∏ —É—á–µ—Ç–µ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è –∫ –º–∞—Å—Å–µ —Å—É–¥–Ω–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è  
/// –º–∞—Å—Å–∞ –ª—å–¥–∞ –Ω–∞ –±–æ—Ä—Ç–∞—Ö, –ø–∞–ª—É–±–∞—Ö, –ø–∞–ª—É–±–Ω–æ–º –≥—Ä—É–∑–µ. –ú–∞—Å—Å–∞ –ª—å–¥–∞ –∏ –µ–≥–æ –º–æ–º–µ–Ω—Ç—ã,  
/// —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –¥–ª—è –æ—Å–∞–¥–∫–∏ ùëëùëöùëñùëõ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∑–∞–≥—Ä—É–∑–∫–∏. 
pub struct Icing {
    /// –¢–∏–ø –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è
    icing_stab: Rc<dyn IIcingStab>,
    /// –ü–ª–æ—â–∞–¥—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
    area_h: Vec<Area>,
    /// –ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø–∞—Ä—É—Å–Ω–æ—Å—Ç–∏
    area_v: Vec<Area>,    
    /// –í—Å–µ –≥—Ä—É–∑—ã —Å—É–¥–Ω–∞
    loads_cargo: Rc<Vec<Rc<Box<dyn ILoad>>>>,
}
///
impl Icing {
    /// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    /// * icing_stab - –¢–∏–ø –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è
    /// * icing_area_h - –ü–ª–æ—â–∞–¥—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
    /// * icing_area_v - –ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø–∞—Ä—É—Å–Ω–æ—Å—Ç–∏    
    /// * loads_cargo - –ì—Ä—É–∑—ã —Å—É–¥–Ω–∞
    pub fn new(
        icing_stab: Rc<dyn IIcingStab>,
        area_h: Vec<Area>,
        area_v: Vec<Area>,        
        loads_cargo: Rc<Vec<Rc<Box<dyn ILoad>>>>,
    ) -> Self {
        Self{
            icing_stab, 
            area_h,
            area_v,            
            loads_cargo,
        }
    }
}
///
impl IIcing for Icing {
    /// –°—É–º–º–∞—Ä–Ω–∞—è –º–∞—Å—Å–∞ –ª—å–¥–∞ –ø–æ–ø–∞–¥–∞—é—â–∞—è –≤ Bound –∏–ª–∏ –≤—Å—è –µ—Å–ª–∏ Bound –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    fn mass(&self, bound: Option<Bound>) -> f64 {
        self.area_h.iter().map(|v| v.value(bound) ).sum::<f64>() * self.icing_stab.mass_h() + 
        self.area_v.iter().map(|v| v.value(bound) ).sum::<f64>() * self.icing_stab.mass_v() +
        self.loads_cargo.iter().map(|v| v.windage_area(bound) ).sum::<f64>() * self.icing_stab.mass_h()
    }
    /// –°—É–º–º–∞—Ä–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç
    fn moment_mass(&self) -> Moment {
        self
                    .loads_cargo
                    .iter()
                    .map(|c| c.moment_mass())
                    .sum::<Moment>()
                    
        self.area_h.iter().map(|v| v.value(bound) ).sum::<f64>() * self.icing_stab.mass_h() + 
        self.area_v.iter().map(|v| v.value(bound) ).sum::<f64>() * self.icing_stab.mass_v() +
        self.loads_cargo.iter().map(|v| v.windage_area(bound) ).sum::<f64>() * self.icing_stab.mass_h()
    }
    /// –û—Ç—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –º–∞—Å—Å
    fn shift(&self) -> Position {
        self.moment_mass().to_pos(self.mass(None))
    }
}
#[doc(hidden)]
pub trait IIcing {
    /// –°—É–º–º–∞—Ä–Ω–∞—è –º–∞—Å—Å–∞ –ª—å–¥–∞ –ø–æ–ø–∞–¥–∞—é—â–∞—è –≤ Bound –∏–ª–∏ –≤—Å—è –µ—Å–ª–∏ Bound –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    fn mass(&self, bound: Option<Bound>) -> f64;
    /// –°—É–º–º–∞—Ä–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç
    fn moment_mass(&self) -> Moment;
    /// –û—Ç—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –º–∞—Å—Å
    fn shift(&self) -> Position;
}
// –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#[doc(hidden)]
pub struct FakeIcing {
    mass: f64,
    moment_mass: Moment,
    shift: Position,
}
#[doc(hidden)]
#[allow(dead_code)]
impl FakeIcing {
    pub fn new(
        mass: f64,
        moment_mass: Moment,
        shift: Position,
    ) -> Self {
        Self {
            mass,
            moment_mass,
            shift,
        }
    }
}
#[doc(hidden)]
impl IIcing for FakeIcing {
    fn mass(&self, _: Option<Bound>) -> f64 {
        self.mass
    }
    fn moment_mass(&self) -> Moment {
        self.moment_mass
    }
    fn shift(&self) -> Position {
        self.shift
    }
}



