//! –†–∞—Å—á–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å—É–¥–Ω–∞

use std::{f64::consts::PI, rc::Rc};

use crate::{math::{Curve, ICurve}, Error};

use super::{rolling_amplitude::IRollingAmplitude, lever_diagram::ILeverDiagram, Stability::IStability};

/// –†–∞—Å—á–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å—É–¥–Ω–∞
pub struct Stability {
    /// –£–≥–æ–ª –∑–∞–ª–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π
    flooding_angle: f64,
    /// –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–ª–µ—á —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    lever_diagram: Rc<dyn ILeverDiagram>,
    /// –ê–º–ø–ª–∏—Ç—É–¥–∞ –∫–∞—á–∫–∏ —Å—É–¥–Ω–∞ —Å –∫—Ä—É–≥–ª–æ–π —Å–∫—É–ª–æ–π (2.1.5)
    rolling_amplitude: Rc<dyn IRollingAmplitude>,
    /// –†–∞—Å—á–µ—Ç –ø–ª–µ—á–∞ –∫—Ä–µ–Ω—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç –¥–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
    wind: Box<dyn IWind>,
    /// –ö—Ä–∏–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–ª–µ—á —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    dso_curve: Option<Curve>,
    /// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —É–≥–æ–ª –∫—Ä–µ–Ω–∞ Œ∏ùë§1, –≤—ã–∑–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –≤–µ—Ç—Ä–æ–º
    theta_w1: Option<f64>,
    /// –ö—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–≥–æ–¥—ã
    k: Option<f64>,
}

impl Stability {
    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    /// * flooding_angle - –£–≥–æ–ª –∑–∞–ª–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π
    /// * stability_arm - –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–ª–µ—á —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    /// * rolling_amplitude - –ê–º–ø–ª–∏—Ç—É–¥–∞ –∫–∞—á–∫–∏ —Å—É–¥–Ω–∞ —Å –∫—Ä—É–≥–ª–æ–π —Å–∫—É–ª–æ–π (2.1.5)
    /// * wind - –†–∞—Å—á–µ—Ç –ø–ª–µ—á–∞ –∫—Ä–µ–Ω—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç –¥–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
    pub fn new(
        flooding_angle: f64,
        lever_diagram: Rc<dyn ILeverDiagram>,
        rolling_amplitude: Rc<dyn IRollingAmplitude>,
        wind: Box<dyn IWind>,
    ) -> Self {
        Self {
            flooding_angle,
            lever_diagram,
            rolling_amplitude,
            wind,
            dso_curve: None, 
            theta_w1: None,
            k: None,
        }
    }
    fn calculate(&mut self) -> Result<(), Error>  {
        let l_w1 = self.wind.arm_wind_static();
        let l_w2 = self.wind.arm_wind_dynamic();
        let theta_w1 = *self
            .lever_diagram
            .angle(l_w1)
            .first()
            .ok_or(Error::Calculate(
                "Stability calculate error: no angle for l_w1".to_owned(),
            ))?;
        let theta_w2: f64 = 50.;
        let theta_f = self.flooding_angle;
        let l_w2_angles = self.lever_diagram.angle(l_w2);
        let l_w2_angle_first = *l_w2_angles.first().ok_or(Error::Calculate(
            "Stability calculate error: no angle for l_w2".to_owned(),
        ))?;
        let theta_c = *l_w2_angles.get(1).ok_or(Error::Calculate(
            "Stability calculate error: no second angle for l_w2".to_owned(), 
        ))?;
        let dso_curve = Curve::new_catmull_rom(&self.lever_diagram.dso());
        // —Ä–∞—Å—á–µ—Ç –∞
        let a_angle_first = theta_w1 - self.rolling_amplitude.calculate().round();
        let a_angle_second = l_w2_angle_first;
        let a_delta_angle = a_angle_second - a_angle_first;
        let a_s1 = dso_curve.integral(a_angle_first, a_angle_second);
        let a_s2 = a_delta_angle*l_w2;
        let a = (a_s2 - a_s1)*PI/180.;        
        // —Ä–∞—Å—á–µ—Ç b
        let b_angle_first = l_w2_angle_first;
        let b_angle_second = theta_w2.min(theta_f).min(theta_c);
        let b_delta_angle = b_angle_second - b_angle_first;
        let b_s1 = dso_curve.integral(b_angle_first, b_angle_second);
        let b_s2 = b_delta_angle*l_w2;
        let b = (b_s1 - b_s2)*PI/180.;  
        let k = b / a;
        log::info!("\t Stability k l_w1:{l_w1} l_w2:{l_w2} theta_w1:{theta_w1}  theta_w2:{theta_w2} theta_c:{theta_c} theta_f:{theta_f}
            a_angle1:{a_angle_first} a_angle2:{l_w2_angle_first} a_s1:{a_s1} a_s2:{a_s2} a:{a} 
            b_angle1:{l_w2_angle_first} b_angle2:{b_angle_second} b_s1:{b_s1} b_s2:{b_s2} b:{b} 
            k:{k}");

        self.dso_curve = Some(dso_curve);
        self.theta_w1 = Some(theta_w1);
        self.k = Some(k);
        Ok(())
    }
}
///
impl IStability for Stability {
    /// –†–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–≥–æ–¥—ã –ö (2.1.2)
    fn k(&mut self) -> Result<f64, Error> {
        if self.k.is_none() {
            self.calculate()?;
        }

        Ok(self.k.expect("Stability k error: no k!"))
    }
    /// –ü–ª–æ—â–∞–¥—å –ø–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    fn dso_area(&mut self, angle1: f64, angle2: f64) -> Result<f64, Error> {
        assert!(angle1 < angle2, "Stability dso_area angle1 {angle1} < angle2 {angle2}");
        if self.k.is_none() {
            self.calculate()?;
        }

        Ok(self.dso_curve.as_ref().expect("Stability k error: no k!").integral(angle1, angle2))
    }
    /// –£–≥–æ–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞–∫—Å–∏–º—É–º—É –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    fn theta_max(&mut self) -> Result<f64, Error>  {
        if self.k.is_none() {
            self.calculate()?;
        }
        Ok(self.lever_diagram.theta_max())
    }
}
#[doc(hidden)]
pub trait IStability {
    /// –†–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–≥–æ–¥—ã –ö (2.1.2)
    fn k(&mut self) -> Result<f64, Error>;
    /// –ü–ª–æ—â–∞–¥—å –ø–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    fn dso_area(&mut self, angle1: f64, angle2: f64) -> Result<f64, Error>;
    /// –£–≥–æ–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞–∫—Å–∏–º—É–º—É –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    fn theta_max(&mut self) -> Result<f64, Error>;
}
// –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#[doc(hidden)]
pub struct FakeStability {
    k: Result<f64, Error>,
    dso_area: Result<f64, Error>,
    theta_max: Result<f64, Error>,
}
#[doc(hidden)]
#[allow(dead_code)]
impl FakeStability {
    pub fn new(
        k: Result<f64, Error>,
        dso_area: Result<f64, Error>,
        theta_max: Result<f64, Error>,
    ) -> Self {
        Self {
            k,
            dso_area,
            theta_max,
        }
    }
}
#[doc(hidden)]
impl IStability for FakeStability {
    /// –†–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–≥–æ–¥—ã –ö (2.1.2)
    fn k(&mut self) -> Result<f64, Error> {
        self.k.clone()
    }
    /// –ü–ª–æ—â–∞–¥—å –ø–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    fn dso_area(&mut self, _: f64, _: f64) -> Result<f64, Error> {
        self.dso_area.clone()
    }
    /// –£–≥–æ–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞–∫—Å–∏–º—É–º—É –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    fn theta_max(&mut self) -> Result<f64, Error> {
        self.theta_max.clone()
    }
}


